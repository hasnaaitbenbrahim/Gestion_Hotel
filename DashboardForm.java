/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Forms;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;  
import Connexion.Connexion;  // Or whatever package your connexion class is in
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JPasswordField;
import javax.swing.JButton;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.PreparedStatement;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

/**
 *
 * @author hasna
 */
public class DashboardForm extends javax.swing.JInternalFrame {

    /**
     * Creates new form DashboardForm
     */
    public DashboardForm() {
        initComponents();
        
        // Set BorderLayout for the panels
        chartPanel1.setLayout(new java.awt.BorderLayout());
        chartPanel2.setLayout(new java.awt.BorderLayout());
        
        // Create and display the charts
        createRoomCategoryChart();
        createReservationsChart();
        
        // Make the frame visible
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        chartPanel1 = new javax.swing.JPanel();
        chartPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jLabel1.setFont(new java.awt.Font("Khmer MN", 3, 48)); // NOI18N
        jLabel1.setText("Dashboard");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 255));
        jLabel2.setText("Chambres par catégorie");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 255));
        jLabel3.setText("Reservations d’un client par année");

        chartPanel1.setBackground(new java.awt.Color(204, 204, 255));

        javax.swing.GroupLayout chartPanel1Layout = new javax.swing.GroupLayout(chartPanel1);
        chartPanel1.setLayout(chartPanel1Layout);
        chartPanel1Layout.setHorizontalGroup(
            chartPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 413, Short.MAX_VALUE)
        );
        chartPanel1Layout.setVerticalGroup(
            chartPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 326, Short.MAX_VALUE)
        );

        chartPanel2.setBackground(new java.awt.Color(204, 204, 255));
        chartPanel2.setForeground(new java.awt.Color(204, 204, 255));

        javax.swing.GroupLayout chartPanel2Layout = new javax.swing.GroupLayout(chartPanel2);
        chartPanel2.setLayout(chartPanel2Layout);
        chartPanel2Layout.setHorizontalGroup(
            chartPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 433, Short.MAX_VALUE)
        );
        chartPanel2Layout.setVerticalGroup(
            chartPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Réalisé par : HASNA AIT BEN BRAHIM");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(chartPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(chartPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(371, 371, 371))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(323, 323, 323))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chartPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chartPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50)
                .addComponent(jLabel4)
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private DefaultPieDataset generateRoomCategoryData() {
        DefaultPieDataset dataset = new DefaultPieDataset();
        
        try {
            Connection conn = Connexion.getCnx();
            String query = "SELECT c.libelle, COUNT(*) as count " +
                          "FROM chambre ch " +
                          "JOIN categorie c ON ch.categorie_id = c.id " +
                          "GROUP BY c.libelle";
                          
            System.out.println("Executing query: " + query);
                      
            try (Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery(query)) {
                
                while (rs.next()) {
                    String categoryName = rs.getString("libelle");
                    int count = rs.getInt("count");
                    String label = categoryName + " (" + count + ")";
                    System.out.println("Catégorie: " + label + ", Nombre: " + count);
                    dataset.setValue(label, count);
                }
            }
            
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Erreur SQL: " + e.getMessage());
            JOptionPane.showMessageDialog(this, 
                "Erreur lors de la récupération des données: " + e.getMessage());
        }
        
        return dataset;
    }

    private DefaultCategoryDataset generateReservationsData() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        try {
            Connection conn = Connexion.getCnx();
            String query = "SELECT " +
                          "YEAR(datedebut) as annee, " +
                          "MONTH(datefin) as mois, " +
                          "COUNT(*) as count " +
                          "FROM reservation " +
                          "GROUP BY YEAR(datedebut), MONTH(datefin) " +
                          "ORDER BY annee, mois";
                          
            try (Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery(query)) {
                
                while (rs.next()) {
                    int year = rs.getInt("annee");
                    int month = rs.getInt("mois");
                    int count = rs.getInt("count");
                    String monthName = getMonthName(month);
                    dataset.addValue(count, "Réservations", year + "-" + monthName);
                }
            }
            
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, 
                "Erreur lors de la récupération des données: " + e.getMessage());
        }
        
        return dataset;
    }

    private String getMonthName(int month) {
        String[] monthNames = {
            "Jan", "Fév", "Mar", "Avr", "Mai", "Juin",
            "Juil", "Août", "Sep", "Oct", "Nov", "Déc"
        };
        return monthNames[month - 1];
    }

    private void createRoomCategoryChart() {
        DefaultPieDataset dataset = generateRoomCategoryData();
        
        JFreeChart chart = ChartFactory.createPieChart(
            "Chambres par catégorie",  // Title
            dataset,                   // Dataset
            true,                      // Include legend
            true,                      // Include tooltips
            false                      // No URLs
        );
        
        // Personnaliser l'apparence du graphique
        chart.setBackgroundPaint(java.awt.Color.WHITE);
        
        // Personnaliser les étiquettes du graphique
        org.jfree.chart.plot.PiePlot plot = (org.jfree.chart.plot.PiePlot) chart.getPlot();
        plot.setLabelGenerator(new org.jfree.chart.labels.StandardPieSectionLabelGenerator(
            "{0}: {1} ({2}%)", // Format: Nom de catégorie: Nombre (Pourcentage%)
            new java.text.DecimalFormat("0"),      // Format pour le nombre
            new java.text.DecimalFormat("0.0")     // Format pour le pourcentage
        ));
        
        // Create ChartPanel and set its preferred size
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new java.awt.Dimension(400, 300));
        
        // Add the chart to the panel
        chartPanel1.removeAll();
        chartPanel1.add(chartPanel, java.awt.BorderLayout.CENTER);
        chartPanel1.revalidate();
        chartPanel1.repaint();
    }

    private void createReservationsChart() {
        DefaultCategoryDataset dataset = generateReservationsData();
        
        JFreeChart chart = ChartFactory.createBarChart(
            "Réservations par période",     // Title
            "Période",                      // X-Axis Label
            "Nombre de réservations",       // Y-Axis Label
            dataset
        );
        
        // Create ChartPanel and set its preferred size
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new java.awt.Dimension(400, 300));
        
        // Add the chart to the panel
        chartPanel2.removeAll();
        chartPanel2.add(chartPanel, java.awt.BorderLayout.CENTER);
        chartPanel2.revalidate();
        chartPanel2.repaint();
    }

    
      
        
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartPanel1;
    private javax.swing.JPanel chartPanel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
