/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Forms;

import Entities.Chambre;
import Entities.Client;
import Entities.Reservation;
import Service.ChambreService;
import Service.ClientService;
import Service.ReservationService;
import java.awt.HeadlessException;
import java.awt.print.PrinterException;
import java.text.MessageFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.OrientationRequested;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.Desktop;
import java.io.File;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileOutputStream;

/**
 *
 * @author hasna
 */
public class ReservationForm extends javax.swing.JInternalFrame {
        private ReservationService rs;
        private DefaultTableModel model;
        private ClientService cs;
        private ChambreService chms;
        private static int id;   
   
    /**
     * Creates new form ReservationForm
     */
    public ReservationForm() {
        initComponents();
        this.setTitle("Gestion des Reservations");
        rs=new ReservationService();
        cs=new ClientService();
        chms= new ChambreService();
        
        loadClient();
        loadChambre();
        load();
    }
    private void load(){
    DefaultTableModel model = new DefaultTableModel(
      new Object[]{"ID", "Nom Client", "Téléphone", "Date Début", "Date Fin"},
    0
);
        TableReservations.setModel(model);        
        model.setRowCount(0);
                 for (Reservation re: rs.findAll()){
         model.addRow(new Object[]{
             re.getId(),
             re.getClt() != null ? re.getClt().getNom() : "Non spécifié",
             re.getChm() != null ? re.getChm().getTelephone() : "Non spécifié",
             re.getDatedebut(),
             re.getDatefin(),
             
         });
         }}

         private void loadClient(){
       for(Client clt:cs.findAll()) {
           listeclients.addItem(clt);
       }
    }
         
            private void loadChambre(){
       for(Chambre chm:chms.findAll()) {
           listechambres.addItem(chm);
       }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        supprimer = new javax.swing.JButton();
        addreservation = new javax.swing.JButton();
        modifierreservation = new javax.swing.JButton();
        listeclients = new javax.swing.JComboBox();
        listechambres = new javax.swing.JComboBox();
        datedebut = new com.toedter.calendar.JDateChooser();
        datefin = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        PrintAsPdf = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableReservations = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setPreferredSize(new java.awt.Dimension(749, 740));
        setRequestFocusEnabled(false);

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel2.setText("Client");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel3.setText("Chambre");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel4.setText("Date debut");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel5.setText("Date fin");

        supprimer.setBackground(new java.awt.Color(255, 102, 102));
        supprimer.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        supprimer.setText("Supprimer");
        supprimer.setPreferredSize(new java.awt.Dimension(90, 31));
        supprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprimerActionPerformed(evt);
            }
        });

        addreservation.setBackground(new java.awt.Color(0, 153, 51));
        addreservation.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        addreservation.setText("Enregistrer");
        addreservation.setPreferredSize(new java.awt.Dimension(94, 31));
        addreservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addreservationActionPerformed(evt);
            }
        });

        modifierreservation.setBackground(new java.awt.Color(255, 153, 51));
        modifierreservation.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        modifierreservation.setText("Modifier");
        modifierreservation.setPreferredSize(new java.awt.Dimension(90, 31));
        modifierreservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifierreservationActionPerformed(evt);
            }
        });

        listeclients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listeclientsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(36, 36, 36)
                            .addComponent(supprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(modifierreservation, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(addreservation, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(17, 17, 17)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(listeclients, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(datedebut, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(listechambres, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(datefin, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(listeclients, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(listechambres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(datedebut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(datefin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(supprimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modifierreservation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addreservation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jLabel7.setBackground(new java.awt.Color(102, 102, 255));
        jLabel7.setFont(new java.awt.Font("Khmer MN", 1, 48)); // NOI18N
        jLabel7.setText("Gestion Reservations");
        jLabel7.setPreferredSize(new java.awt.Dimension(749, 740));

        jLabel6.setBackground(new java.awt.Color(102, 102, 255));
        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel6.setText("Liste des Reservations");

        PrintAsPdf.setBackground(new java.awt.Color(0, 51, 255));
        PrintAsPdf.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        PrintAsPdf.setForeground(new java.awt.Color(255, 255, 255));
        PrintAsPdf.setText("Print As PDF");
        PrintAsPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintAsPdfActionPerformed(evt);
            }
        });

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/reservation.png"))); // NOI18N

        TableReservations.setBackground(new java.awt.Color(204, 204, 255));
        TableReservations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Client", "Chambre", "Date debut", "Date fin"
            }
        ));
        TableReservations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableReservationsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TableReservations);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(161, 161, 161))
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PrintAsPdf))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 696, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PrintAsPdf)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void supprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprimerActionPerformed
          int row = TableReservations.getSelectedRow(); // Get the selected row
    if (row >= 0) {
        // Capture reservation ID from the selected row
        int reservationId = Integer.parseInt(TableReservations.getValueAt(row, 0).toString());

        // Récupérer l'objet Reservation correspondant à l'ID
        Reservation reservationToDelete = rs.findById(reservationId); // Assure-toi que `findById` renvoie un objet Reservation

        // Vérifie si l'objet existe
        if (reservationToDelete != null) {
            // Passer l'objet Reservation à la méthode delete
            boolean isDeleted = rs.delete(reservationToDelete);
            if (isDeleted) {
                JOptionPane.showMessageDialog(this, "Reservation deleted successfully");
                load(); // Recharge la table pour refléter les changements
            } else {
                JOptionPane.showMessageDialog(this, "Error deleting reservation");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Reservation not found");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a reservation to delete");
    }

    }//GEN-LAST:event_supprimerActionPerformed

    private void addreservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addreservationActionPerformed
          Client clt = (Client) listeclients.getSelectedItem();
          Chambre cmb = (Chambre) listechambres.getSelectedItem();
          
          if (clt == null || cmb == null || datedebut.getDate() == null || datefin.getDate() == null) {
        JOptionPane.showMessageDialog(this, "Veuillez sélectionner tous les champs !");
        return;
    }
          java.util.Date utilDateDebut = datedebut.getDate();
          java.util.Date utilDateFin = datefin.getDate();

         Date sqlDateDebut = new java.sql.Date(utilDateDebut.getTime());
         Date sqlDateFin = new java.sql.Date(utilDateFin.getTime());
         
        Reservation res = new Reservation(clt, cmb, sqlDateDebut, sqlDateFin);
        System.out.println("Client: " + clt);
        System.out.println("Chambre: " + cmb);
        System.out.println("Date Debut: " + utilDateDebut);
        System.out.println("Date Fin: " + utilDateFin);

        
        boolean isCreated = rs.create(res);
        System.out.println("Reservation created: " + isCreated);
         JOptionPane.showMessageDialog(this,"Reservation Bien Crée");    
        load();
            
    }//GEN-LAST:event_addreservationActionPerformed

    private void modifierreservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifierreservationActionPerformed

      if (id != 0) {  // Vérifiez si une réservation a été sélectionnée
        Client selectedClient = (Client) listeclients.getSelectedItem();
        Chambre selectedChambre = (Chambre) listechambres.getSelectedItem();
        Date startDate = datedebut.getDate();
        Date endDate = datefin.getDate();
        
        // Validation des champs
        if (selectedClient == null || selectedChambre == null || startDate == null || endDate == null) {
            JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs");
            return;
        }
        
        // Créez un objet Reservation mis à jour
        Reservation updatedReservation = new Reservation(selectedClient, selectedChambre, startDate, endDate);
        updatedReservation.setId(id); // Utilisez l'ID de la réservation à modifier
        
        // Mettez à jour la réservation via votre service
        boolean isUpdated = rs.update(updatedReservation);
        if (isUpdated) {
            JOptionPane.showMessageDialog(this, "Réservation mise à jour avec succès");
            load(); // Recharger les données dans le tableau
        } else {
            JOptionPane.showMessageDialog(this, "Erreur lors de la mise à jour de la réservation");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Sélectionnez une réservation à modifier");
    }
      
    }//GEN-LAST:event_modifierreservationActionPerformed

    private void listeclientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listeclientsActionPerformed
        
    }//GEN-LAST:event_listeclientsActionPerformed

    private void TableReservationsMouseClicked(java.awt.event.MouseEvent evt) {
        int row = TableReservations.getSelectedRow();
        if (row >= 0) {
            // Get the reservation ID from the first column
            id = Integer.parseInt(TableReservations.getValueAt(row, 0).toString());
            
            // Fetch the complete reservation object using the ID
            Reservation selectedReservation = rs.findById(id);
            
            if (selectedReservation != null) {
                // Set the form fields with the reservation data
                listeclients.setSelectedItem(selectedReservation.getClt());
                listechambres.setSelectedItem(selectedReservation.getChm());
                datedebut.setDate(selectedReservation.getDatedebut());
                datefin.setDate(selectedReservation.getDatefin());
            }
        }
    }

    private void PrintAsPdfActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            // Create file chooser for PDF save location
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Enregistrer le PDF");
            fileChooser.setFileFilter(new FileNameExtensionFilter("PDF Files", "pdf"));
            
            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                String filePath = fileChooser.getSelectedFile().getPath();
                if (!filePath.toLowerCase().endsWith(".pdf")) {
                    filePath += ".pdf";
                }
                
                // Create PDF document
                Document document = new Document(PageSize.A4.rotate());
                PdfWriter.getInstance(document, new FileOutputStream(filePath));
                document.open();
                
                // Add title
                Font titleFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
                Paragraph title = new Paragraph("Liste des Réservations", titleFont);
                title.setAlignment(Element.ALIGN_CENTER);
                title.setSpacingAfter(20);
                document.add(title);
                
                // Create PDF table
                PdfPTable pdfTable = new PdfPTable(TableReservations.getColumnCount());
                pdfTable.setWidthPercentage(100);
                
                // Add headers
                for (int i = 0; i < TableReservations.getColumnCount(); i++) {
                    PdfPCell cell = new PdfPCell(new Phrase(TableReservations.getColumnName(i)));
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable.addCell(cell);
                }
                
                // Add data
                for (int i = 0; i < TableReservations.getRowCount(); i++) {
                    for (int j = 0; j < TableReservations.getColumnCount(); j++) {
                        Object value = TableReservations.getValueAt(i, j);
                        pdfTable.addCell(value != null ? value.toString() : "");
                    }
                }
                
                document.add(pdfTable);
                document.close();
                
                // Show success message
                JOptionPane.showMessageDialog(this,
                    "Le PDF a été créé avec succès!\nEmplacement: " + filePath,
                    "Succès",
                    JOptionPane.INFORMATION_MESSAGE);
                
                // Open the PDF file
                if (Desktop.isDesktopSupported()) {
                    Desktop.getDesktop().open(new File(filePath));
                }
                
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "Erreur lors de la création du PDF: " + e.getMessage(),
                "Erreur",
                JOptionPane.ERROR_MESSAGE);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton PrintAsPdf;
    private javax.swing.JTable TableReservations;
    private javax.swing.JButton addreservation;
    private com.toedter.calendar.JDateChooser datedebut;
    private com.toedter.calendar.JDateChooser datefin;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox listechambres;
    private javax.swing.JComboBox listeclients;
    private javax.swing.JButton modifierreservation;
    private javax.swing.JButton supprimer;
    // End of variables declaration//GEN-END:variables
}
